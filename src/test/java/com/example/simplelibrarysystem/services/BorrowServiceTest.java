package com.example.simplelibrarysystem.services;

import com.example.simplelibrarysystem.dto.BorrowDto;
import com.example.simplelibrarysystem.entities.BookEntity;
import com.example.simplelibrarysystem.entities.BorrowEntity;
import com.example.simplelibrarysystem.entities.BorrowerEntity;
import com.example.simplelibrarysystem.exception.CustomBadRequestException;
import com.example.simplelibrarysystem.repos.BookRepository;
import com.example.simplelibrarysystem.repos.BorrowRepository;
import com.example.simplelibrarysystem.repos.BorrowerRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.awt.print.Book;
import java.util.Date;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.argThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class BorrowServiceTest {

    @Mock
    private BorrowRepository borrowRepository;
    @Mock
    private BorrowerRepository borrowerRepository;
    @Mock
    private BookRepository bookRepository;

    @InjectMocks
    private BorrowService borrowService;

    @Test
    public void testBorrowBook_Successful() {
        // Mock repositories
        BorrowerEntity borrowerEntity = new BorrowerEntity(1L, "John Doe", "john@test.com");
        BookEntity bookEntity = new BookEntity(1L, "1234567890111", "Test Title", "Test Author", 1);
        when(borrowerRepository.findById(1L)).thenReturn(Optional.of(borrowerEntity));
        when(bookRepository.findById(1L)).thenReturn(Optional.of(bookEntity));

        // Create reservation DTO
        BorrowDto borrowDto = new BorrowDto(null, 1L, 1L, null, null, false);
        BorrowEntity expectedBorrow = new BorrowEntity(11L, borrowerEntity, bookEntity, null, null, false);
        when(borrowRepository.save(argThat(reservation -> expectedBorrow.getBook().getIsbn().equals("1234567890111")))).thenReturn(expectedBorrow);

        // Call the method
        Long borrowId = borrowService.borrowBook(borrowDto);

        // Assertions
        verify(borrowRepository).save(any(BorrowEntity.class));
        assertEquals(borrowId, Long.valueOf(11L)); // Assuming reservation ID is generated by DB
    }

    @Test
    public void testReturnBook_SuccessfulReturn() throws Exception {
        // Mock data
        Long borrowId = 1L;
        BorrowEntity expectedBorrow = new BorrowEntity(borrowId,
                new BorrowerEntity(1L, "John Doe", "joe@test.com"),
                new BookEntity(2L, "Test Title", "Test Author", "1234567890", 1),
                new Date(2024, 05, 10), new Date(), false);  // Set returned fields

        // Mock repositories (return existing reservation and mock save behavior)
        when(borrowRepository.findById(borrowId)).thenReturn(Optional.of(expectedBorrow));
        when(borrowRepository.save(expectedBorrow)).thenReturn(expectedBorrow); // Return the same reservation

        // Call the method
        Long returnedBorrowId = borrowService.returnBook(borrowId);

        // Assertions
        assertThat(returnedBorrowId).isEqualTo(borrowId);
        assertThat(expectedBorrow.getReturned()).isTrue();  // Verify on expected object
        assertThat(expectedBorrow.getReturnedDate()).isNotNull();
    }

    @Test
    public void testReturnBook_InvalidBorrowId() {
        // Mock data with invalid reservation ID
        Long reservationId = 10L; // Non-existent reservation

        // Mock repository (reservation not found)
        when(borrowRepository.findById(reservationId)).thenReturn(Optional.empty());

        // Call the method and verify exception
        try {
            borrowService.returnBook(reservationId);
            fail("Expected CustomBadRequestException"); // If execution reaches here, the test fails
        } catch (CustomBadRequestException e) {
            // Expected exception thrown
        }
    }

}
